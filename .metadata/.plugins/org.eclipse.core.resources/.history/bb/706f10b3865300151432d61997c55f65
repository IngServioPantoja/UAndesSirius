/**
 */
package escenariosCalidad.util;

import escenariosCalidad.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see escenariosCalidad.EscenariosCalidadPackage
 * @generated
 */
public class EscenariosCalidadAdapterFactory extends AdapterFactoryImpl {
	/**
	 * The cached model package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected static EscenariosCalidadPackage modelPackage;

	/**
	 * Creates an instance of the adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EscenariosCalidadAdapterFactory() {
		if (modelPackage == null) {
			modelPackage = EscenariosCalidadPackage.eINSTANCE;
		}
	}

	/**
	 * Returns whether this factory is applicable for the type of the object.
	 * <!-- begin-user-doc -->
	 * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
	 * <!-- end-user-doc -->
	 * @return whether this factory is applicable for the type of the object.
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object object) {
		if (object == modelPackage) {
			return true;
		}
		if (object instanceof EObject) {
			return ((EObject)object).eClass().getEPackage() == modelPackage;
		}
		return false;
	}

	/**
	 * The switch that delegates to the <code>createXXX</code> methods.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EscenariosCalidadSwitch<Adapter> modelSwitch =
		new EscenariosCalidadSwitch<Adapter>() {
			@Override
			public Adapter caseArquitectura(Arquitectura object) {
				return createArquitecturaAdapter();
			}
			@Override
			public Adapter caseEscenario(Escenario object) {
				return createEscenarioAdapter();
			}
			@Override
			public Adapter caseFuente(Fuente object) {
				return createFuenteAdapter();
			}
			@Override
			public Adapter caseEstimulo(Estimulo object) {
				return createEstimuloAdapter();
			}
			@Override
			public Adapter caseMedidaRespuesta(MedidaRespuesta object) {
				return createMedidaRespuestaAdapter();
			}
			@Override
			public Adapter caseArtefacto(Artefacto object) {
				return createArtefactoAdapter();
			}
			@Override
			public Adapter defaultCase(EObject object) {
				return createEObjectAdapter();
			}
		};

	/**
	 * Creates an adapter for the <code>target</code>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param target the object to adapt.
	 * @return the adapter for the <code>target</code>.
	 * @generated
	 */
	@Override
	public Adapter createAdapter(Notifier target) {
		return modelSwitch.doSwitch((EObject)target);
	}


	/**
	 * Creates a new adapter for an object of class '{@link escenariosCalidad.Arquitectura <em>Arquitectura</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see escenariosCalidad.Arquitectura
	 * @generated
	 */
	public Adapter createArquitecturaAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link escenariosCalidad.Escenario <em>Escenario</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see escenariosCalidad.Escenario
	 * @generated
	 */
	public Adapter createEscenarioAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link escenariosCalidad.Fuente <em>Fuente</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see escenariosCalidad.Fuente
	 * @generated
	 */
	public Adapter createFuenteAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link escenariosCalidad.Estimulo <em>Estimulo</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see escenariosCalidad.Estimulo
	 * @generated
	 */
	public Adapter createEstimuloAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link escenariosCalidad.MedidaRespuesta <em>Medida Respuesta</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see escenariosCalidad.MedidaRespuesta
	 * @generated
	 */
	public Adapter createMedidaRespuestaAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link escenariosCalidad.Artefacto <em>Artefacto</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see escenariosCalidad.Artefacto
	 * @generated
	 */
	public Adapter createArtefactoAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for the default case.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @generated
	 */
	public Adapter createEObjectAdapter() {
		return null;
	}

} //EscenariosCalidadAdapterFactory
