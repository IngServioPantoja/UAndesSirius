/*
* generated by Xtext
*/
package escenariosCalidad.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import escenariosCalidad.services.XtextGrammarAccess;

public class XtextParser extends AbstractContentAssistParser {
	
	@Inject
	private XtextGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected escenariosCalidad.ui.contentassist.antlr.internal.InternalXtextParser createParser() {
		escenariosCalidad.ui.contentassist.antlr.internal.InternalXtextParser result = new escenariosCalidad.ui.contentassist.antlr.internal.InternalXtextParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEDoubleAccess().getAlternatives_4_0(), "rule__EDouble__Alternatives_4_0");
					put(grammarAccess.getMetricaAccess().getAlternatives(), "rule__Metrica__Alternatives");
					put(grammarAccess.getUnidadAccess().getAlternatives(), "rule__Unidad__Alternatives");
					put(grammarAccess.getOperadorAccess().getAlternatives(), "rule__Operador__Alternatives");
					put(grammarAccess.getTestAccess().getGroup(), "rule__Test__Group__0");
					put(grammarAccess.getTestAccess().getGroup_3(), "rule__Test__Group_3__0");
					put(grammarAccess.getTestAccess().getGroup_3_3(), "rule__Test__Group_3_3__0");
					put(grammarAccess.getArquitecturaAccess().getGroup(), "rule__Arquitectura__Group__0");
					put(grammarAccess.getArquitecturaAccess().getGroup_3(), "rule__Arquitectura__Group_3__0");
					put(grammarAccess.getArquitecturaAccess().getGroup_3_3(), "rule__Arquitectura__Group_3_3__0");
					put(grammarAccess.getArquitecturaAccess().getGroup_4(), "rule__Arquitectura__Group_4__0");
					put(grammarAccess.getArquitecturaAccess().getGroup_4_3(), "rule__Arquitectura__Group_4_3__0");
					put(grammarAccess.getEscenarioAccess().getGroup(), "rule__Escenario__Group__0");
					put(grammarAccess.getEscenarioAccess().getGroup_2(), "rule__Escenario__Group_2__0");
					put(grammarAccess.getArtefactoAccess().getGroup(), "rule__Artefacto__Group__0");
					put(grammarAccess.getArtefactoAccess().getGroup_3(), "rule__Artefacto__Group_3__0");
					put(grammarAccess.getFuenteAccess().getGroup(), "rule__Fuente__Group__0");
					put(grammarAccess.getEstimuloAccess().getGroup(), "rule__Estimulo__Group__0");
					put(grammarAccess.getMedidaRespuestaAccess().getGroup(), "rule__MedidaRespuesta__Group__0");
					put(grammarAccess.getMedidaRespuestaAccess().getGroup_3(), "rule__MedidaRespuesta__Group_3__0");
					put(grammarAccess.getMedidaRespuestaAccess().getGroup_4(), "rule__MedidaRespuesta__Group_4__0");
					put(grammarAccess.getMedidaRespuestaAccess().getGroup_5(), "rule__MedidaRespuesta__Group_5__0");
					put(grammarAccess.getMedidaRespuestaAccess().getGroup_6(), "rule__MedidaRespuesta__Group_6__0");
					put(grammarAccess.getEDoubleAccess().getGroup(), "rule__EDouble__Group__0");
					put(grammarAccess.getEDoubleAccess().getGroup_4(), "rule__EDouble__Group_4__0");
					put(grammarAccess.getTestAccess().getArquitecturasAssignment_3_2(), "rule__Test__ArquitecturasAssignment_3_2");
					put(grammarAccess.getTestAccess().getArquitecturasAssignment_3_3_1(), "rule__Test__ArquitecturasAssignment_3_3_1");
					put(grammarAccess.getArquitecturaAccess().getEscenariosAssignment_3_2(), "rule__Arquitectura__EscenariosAssignment_3_2");
					put(grammarAccess.getArquitecturaAccess().getEscenariosAssignment_3_3_1(), "rule__Arquitectura__EscenariosAssignment_3_3_1");
					put(grammarAccess.getArquitecturaAccess().getArtefactosAssignment_4_2(), "rule__Arquitectura__ArtefactosAssignment_4_2");
					put(grammarAccess.getArquitecturaAccess().getArtefactosAssignment_4_3_1(), "rule__Arquitectura__ArtefactosAssignment_4_3_1");
					put(grammarAccess.getEscenarioAccess().getIdAssignment_2_1(), "rule__Escenario__IdAssignment_2_1");
					put(grammarAccess.getEscenarioAccess().getFuenteAssignment_4(), "rule__Escenario__FuenteAssignment_4");
					put(grammarAccess.getEscenarioAccess().getEstimuloAssignment_6(), "rule__Escenario__EstimuloAssignment_6");
					put(grammarAccess.getEscenarioAccess().getMedidaAssignment_8(), "rule__Escenario__MedidaAssignment_8");
					put(grammarAccess.getArtefactoAccess().getUrlAssignment_3_1(), "rule__Artefacto__UrlAssignment_3_1");
					put(grammarAccess.getFuenteAccess().getNameAssignment_2(), "rule__Fuente__NameAssignment_2");
					put(grammarAccess.getEstimuloAccess().getArtefactoAssignment_3(), "rule__Estimulo__ArtefactoAssignment_3");
					put(grammarAccess.getMedidaRespuestaAccess().getMetricaAssignment_3_1(), "rule__MedidaRespuesta__MetricaAssignment_3_1");
					put(grammarAccess.getMedidaRespuestaAccess().getValorEsperadoAssignment_4_1(), "rule__MedidaRespuesta__ValorEsperadoAssignment_4_1");
					put(grammarAccess.getMedidaRespuestaAccess().getUnidadAssignment_5_1(), "rule__MedidaRespuesta__UnidadAssignment_5_1");
					put(grammarAccess.getMedidaRespuestaAccess().getOperadorAssignment_6_1(), "rule__MedidaRespuesta__OperadorAssignment_6_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			escenariosCalidad.ui.contentassist.antlr.internal.InternalXtextParser typedParser = (escenariosCalidad.ui.contentassist.antlr.internal.InternalXtextParser) parser;
			typedParser.entryRuleTest();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public XtextGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(XtextGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
